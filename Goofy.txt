--reanimate by MyWorld#4430 discord.gg/pYVHtSJmEY
local v3_net, v3_808 = Vector3.new(5000, 25.1, 0), Vector3.new(8, 0, 8)
local function getNetlessVelocity(realPartVelocity)
    local mag = realPartVelocity.Magnitude
    if mag > 1 then
        local unit = realPartVelocity.Unit
        if (unit.Y > 0.25) or (unit.Y < -0.75) then
            return unit * (25.1 / unit.Y)
        end
    end
    return v3_net + realPartVelocity * v3_808
end
local simradius = "shp" --simulation radius (net bypass) method
--"shp" - sethiddenproperty
--"ssr" - setsimulationradius
--false - disable
local simrad = 1000 --simulation radius value
local healthHide = true --moves your head away every 3 seconds so players dont see your health bar (alignmode 4 only)
local reclaim = true --if you lost control over a part this will move your primary part to the part so you get it back (alignmode 4)
local novoid = true --prevents parts from going under workspace.FallenPartsDestroyHeight if you control them (alignmode 4 only)
local physp = nil --PhysicalProperties.new(0.01, 0, 1, 0, 0) --sets .CustomPhysicalProperties to this for each part
local noclipAllParts = false --set it to true if you want noclip
local antiragdoll = true --removes hingeConstraints and ballSocketConstraints from your character
local newanimate = true --disables the animate script and enables after reanimation
local discharscripts = true --disables all localScripts parented to your character before reanimation
local R15toR6 = true --tries to convert your character to r6 if its r15
local hatcollide = false --makes hats cancollide (credit to ShownApe) (works only with reanimate method 0)
local humState16 = true --enables collisions for limbs before the humanoid dies (using hum:ChangeState)
local addtools = false --puts all tools from backpack to character and lets you hold them after reanimation
local hedafterneck = true --disable aligns for head and enable after neck or torso is removed
local loadtime = game:GetService("Players").RespawnTime + 0.5 --anti respawn delay
local method = 3 --reanimation method
--methods:
--0 - breakJoints (takes [loadtime] seconds to load)
--1 - limbs
--2 - limbs + anti respawn
--3 - limbs + breakJoints after [loadtime] seconds
--4 - remove humanoid + breakJoints
--5 - remove humanoid + limbst
local alignmode = 3 --AlignPosition mode
--modes:
--1 - AlignPosition rigidity enabled true
--2 - 2 AlignPositions rigidity enabled both true and false
--3 - AlignPosition rigidity enabled false
--4 - CFrame
local flingpart = "HumanoidRootPart" --name of the part or the hat used for flinging
--the fling function
--usage: fling(target, duration, velocity)
--target can be set to: basePart, CFrame, Vector3, character model or humanoid (flings at mouse.Hit if argument not provided))
--duration (fling time in seconds) can be set to a number or a string convertable to the number (0.5s if not provided),
--velocity (fling part rotation velocity) can be set to a vector3 value (Vector3.new(20000, 20000, 20000) if not provided)

local lp = game:GetService("Players").LocalPlayer
local rs, ws, sg = game:GetService("RunService"), game:GetService("Workspace"), game:GetService("StarterGui")
local stepped, heartbeat, renderstepped = rs.Stepped, rs.Heartbeat, rs.RenderStepped
local twait, tdelay, rad, inf, abs, clamp = task.wait, task.delay, math.rad, math.huge, math.abs, math.clamp
local cf, v3 = CFrame.new, Vector3.new
local angles = CFrame.Angles
local v3_0, cf_0 = v3(0, 0, 0), cf(0, 0, 0)

local c = lp.Character
if not (c and c.Parent) then
    return
end

c:GetPropertyChangedSignal("Parent"):Connect(function()
    if not (c and c.Parent) then
        c = nil
    end
end)

local clone, destroy, getchildren, getdescendants, isa = c.Clone, c.Destroy, c.GetChildren, c.GetDescendants, c.IsA

local function gp(parent, name, className)
    if typeof(parent) == "Instance" then
        for i, v in pairs(getchildren(parent)) do
            if (v.Name == name) and isa(v, className) then
                return v
            end
        end
    end
    return nil
end

local fenv = getfenv()

local shp = fenv.sethiddenproperty or fenv.set_hidden_property or fenv.set_hidden_prop or fenv.sethiddenprop
local ssr = fenv.setsimulationradius or fenv.set_simulation_radius or fenv.set_sim_radius or fenv.setsimradius or fenv.setsimrad or fenv.set_sim_rad

healthHide = healthHide and ((method == 0) or (method == 3)) and gp(c, "Head", "BasePart")

local reclaim, lostpart = reclaim and c.PrimaryPart, nil

local function align(Part0, Part1)
    
    local att0 = Instance.new("Attachment")
    att0.Position, att0.Orientation, att0.Name = v3_0, v3_0, "att0_" .. Part0.Name
    local att1 = Instance.new("Attachment")
    att1.Position, att1.Orientation, att1.Name = v3_0, v3_0, "att1_" .. Part1.Name

    if alignmode == 4 then
    
        local hide = false
        if Part0 == healthHide then
            healthHide = false
            tdelay(0, function()
                while twait(2.9) and Part0 and c do
                    hide = #Part0:GetConnectedParts() == 1
                    twait(0.1)
                    hide = false
                end
            end)
        end
        
        local rot = rad(0.05)
        local con0, con1 = nil, nil
        con0 = stepped:Connect(function()
            if not (Part0 and Part1) then return con0:Disconnect() and con1:Disconnect() end
            Part0.RotVelocity = Part1.RotVelocity
        end)
        local lastpos = Part0.Position
        con1 = heartbeat:Connect(function(delta)
            if not (Part0 and Part1 and att1) then return con0:Disconnect() and con1:Disconnect() end
            if (not Part0.Anchored) and (Part0.ReceiveAge == 0) then
                if lostpart == Part0 then
                    lostpart = nil
                end
                rot = -rot
                local newcf = Part1.CFrame * att1.CFrame * angles(0, 0, rot)
                if Part1.Velocity.Magnitude > 0.01 then
                    Part0.Velocity = getNetlessVelocity(Part1.Velocity)
                else
                    Part0.Velocity = getNetlessVelocity((newcf.Position - lastpos) / delta)
                end
                lastpos = newcf.Position
                if lostpart and (Part0 == reclaim) then
                    newcf = lostpart.CFrame
                elseif hide then
                    newcf += v3(0, 3000, 0)
                end
                if novoid and (newcf.Y < ws.FallenPartsDestroyHeight + 0.1) then
                    newcf += v3(0, ws.FallenPartsDestroyHeight + 0.1 - newcf.Y, 0)
                end
                Part0.CFrame = newcf
            elseif (not Part0.Anchored) and (abs(Part0.Velocity.X) < 45) and (abs(Part0.Velocity.Y) < 25) and (abs(Part0.Velocity.Z) < 45) then
                lostpart = Part0
            end
        end)
    
    else
        
        Part0.CustomPhysicalProperties = physp
        if (alignmode == 1) or (alignmode == 2) then
            local ape = Instance.new("AlignPosition")
            ape.MaxForce, ape.MaxVelocity, ape.Responsiveness = inf, inf, inf
            ape.ReactionForceEnabled, ape.RigidityEnabled, ape.ApplyAtCenterOfMass = false, true, false
            ape.Attachment0, ape.Attachment1, ape.Name = att0, att1, "AlignPositionRtrue"
            ape.Parent = att0
        end
        
        if (alignmode == 2) or (alignmode == 3) then
            local apd = Instance.new("AlignPosition")
            apd.MaxForce, apd.MaxVelocity, apd.Responsiveness = inf, inf, inf
            apd.ReactionForceEnabled, apd.RigidityEnabled, apd.ApplyAtCenterOfMass = false, false, false
            apd.Attachment0, apd.Attachment1, apd.Name = att0, att1, "AlignPositionRfalse"
            apd.Parent = att0
        end
        
        local ao = Instance.new("AlignOrientation")
        ao.MaxAngularVelocity, ao.MaxTorque, ao.Responsiveness = inf, inf, inf
        ao.PrimaryAxisOnly, ao.ReactionTorqueEnabled, ao.RigidityEnabled = false, false, false
        ao.Attachment0, ao.Attachment1 = att0, att1
        ao.Parent = att0
        
        local con0, con1 = nil, nil
        local vel = Part0.Velocity
        con0 = renderstepped:Connect(function()
            if not (Part0 and Part1) then return con0:Disconnect() and con1:Disconnect() end
            Part0.Velocity = vel
        end)
        local lastpos = Part0.Position
        con1 = heartbeat:Connect(function(delta)
            if not (Part0 and Part1) then return con0:Disconnect() and con1:Disconnect() end
            vel = Part0.Velocity
            if Part1.Velocity.Magnitude > 0.01 then
                Part0.Velocity = getNetlessVelocity(Part1.Velocity)
            else
                Part0.Velocity = getNetlessVelocity((Part0.Position - lastpos) / delta)
            end
            lastpos = Part0.Position
        end)
    
    end

    att0:GetPropertyChangedSignal("Parent"):Connect(function()
        Part0 = att0.Parent
        if not isa(Part0, "BasePart") then
            att0 = nil
            if lostpart == Part0 then
                lostpart = nil
            end
            Part0 = nil
        end
    end)
    att0.Parent = Part0
    
    att1:GetPropertyChangedSignal("Parent"):Connect(function()
        Part1 = att1.Parent
        if not isa(Part1, "BasePart") then
            att1 = nil
            Part1 = nil
        end
    end)
    att1.Parent = Part1
end

local function respawnrequest()
    local ccfr, c = ws.CurrentCamera.CFrame, lp.Character
    lp.Character = nil
    lp.Character = c
    local con = nil
    con = ws.CurrentCamera.Changed:Connect(function(prop)
        if (prop ~= "Parent") and (prop ~= "CFrame") then
            return
        end
        ws.CurrentCamera.CFrame = ccfr
        con:Disconnect()
    end)
end

local destroyhum = (method == 4) or (method == 5)
local breakjoints = (method == 0) or (method == 4)
local antirespawn = (method == 0) or (method == 2) or (method == 3)

hatcollide = hatcollide and (method == 0)

addtools = addtools and lp:FindFirstChildOfClass("Backpack")

if type(simrad) ~= "number" then simrad = 1000 end
if shp and (simradius == "shp") then
    tdelay(0, function()
        while c do
            shp(lp, "SimulationRadius", simrad)
            heartbeat:Wait()
        end
    end)
elseif ssr and (simradius == "ssr") then
    tdelay(0, function()
        while c do
            ssr(simrad)
            heartbeat:Wait()
        end
    end)
end

if antiragdoll then
    antiragdoll = function(v)
        if isa(v, "HingeConstraint") or isa(v, "BallSocketConstraint") then
            v.Parent = nil
        end
    end
    for i, v in pairs(getdescendants(c)) do
        antiragdoll(v)
    end
    c.DescendantAdded:Connect(antiragdoll)
end

if antirespawn then
    respawnrequest()
end

if method == 0 then
    twait(loadtime)
    if not c then
        return
    end
end

if discharscripts then
    for i, v in pairs(getdescendants(c)) do
        if isa(v, "LocalScript") then
            v.Disabled = true
        end
    end
elseif newanimate then
    local animate = gp(c, "Animate", "LocalScript")
    if animate and (not animate.Disabled) then
        animate.Disabled = true
    else
        newanimate = false
    end
end

if addtools then
    for i, v in pairs(getchildren(addtools)) do
        if isa(v, "Tool") then
            v.Parent = c
        end
    end
end

pcall(function()
    settings().Physics.AllowSleep = false
    settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
end)

local OLDscripts = {}

for i, v in pairs(getdescendants(c)) do
    if v.ClassName == "Script" then
        OLDscripts[v.Name] = true
    end
end

local scriptNames = {}

for i, v in pairs(getdescendants(c)) do
    if isa(v, "BasePart") then
        local newName, exists = tostring(i), true
        while exists do
            exists = OLDscripts[newName]
            if exists then
                newName = newName .. "_"    
            end
        end
        table.insert(scriptNames, newName)
        Instance.new("Script", v).Name = newName
    end
end

local hum = c:FindFirstChildOfClass("Humanoid")
if hum then
    for i, v in pairs(hum:GetPlayingAnimationTracks()) do
        v:Stop()
    end
end
c.Archivable = true
local cl = clone(c)
if hum and humState16 then
    hum:ChangeState(Enum.HumanoidStateType.Physics)
    if destroyhum then
        twait(1.6)
    end
end
if destroyhum then
    pcall(destroy, hum)
end

if not c then
    return
end

local head, torso, root = gp(c, "Head", "BasePart"), gp(c, "Torso", "BasePart") or gp(c, "UpperTorso", "BasePart"), gp(c, "HumanoidRootPart", "BasePart")
if hatcollide then
    pcall(destroy, torso)
    pcall(destroy, root)
    pcall(destroy, c:FindFirstChildOfClass("BodyColors") or gp(c, "Health", "Script"))
end

local model = Instance.new("Model", c)
model:GetPropertyChangedSignal("Parent"):Connect(function()
    if not (model and model.Parent) then
        model = nil
    end
end)

for i, v in pairs(getchildren(c)) do
    if v ~= model then
        if addtools and isa(v, "Tool") then
            for i1, v1 in pairs(getdescendants(v)) do
                if v1 and v1.Parent and isa(v1, "BasePart") then
                    local bv = Instance.new("BodyVelocity")
                    bv.Velocity, bv.MaxForce, bv.P, bv.Name = v3_0, v3(1000, 1000, 1000), 1250, "bv_" .. v.Name
                    bv.Parent = v1
                end
            end
        end
        v.Parent = model
    end
end

if breakjoints then
    model:BreakJoints()
else
    if head and torso then
        for i, v in pairs(getdescendants(model)) do
            if isa(v, "JointInstance") then
                local save = false
                if (v.Part0 == torso) and (v.Part1 == head) then
                    save = true
                end
                if (v.Part0 == head) and (v.Part1 == torso) then
                    save = true
                end
                if save then
                    if hedafterneck then
                        hedafterneck = v
                    end
                else
                    pcall(destroy, v)
                end
            end
        end
    end
    if method == 3 then
        task.delay(loadtime, pcall, model.BreakJoints, model)
    end
end

cl.Parent = ws
for i, v in pairs(getchildren(cl)) do
    v.Parent = c
end
pcall(destroy, cl)

local uncollide, noclipcon = nil, nil
if noclipAllParts then
    uncollide = function()
        if c then
            for i, v in pairs(getdescendants(c)) do
                if isa(v, "BasePart") then
                    v.CanCollide = false
                end
            end
        else
            noclipcon:Disconnect()
        end
    end
else
    uncollide = function()
        if model then
            for i, v in pairs(getdescendants(model)) do
                if isa(v, "BasePart") then
                    v.CanCollide = false
                end
            end
        else
            noclipcon:Disconnect()
        end
    end
end
noclipcon = stepped:Connect(uncollide)
uncollide()

for i, scr in pairs(getdescendants(model)) do
    if (scr.ClassName == "Script") and table.find(scriptNames, scr.Name) then
        local Part0 = scr.Parent
        if isa(Part0, "BasePart") then
            for i1, scr1 in pairs(getdescendants(c)) do
                if (scr1.ClassName == "Script") and (scr1.Name == scr.Name) and (not scr1:IsDescendantOf(model)) then
                    local Part1 = scr1.Parent
                    if (Part1.ClassName == Part0.ClassName) and (Part1.Name == Part0.Name) then
                        align(Part0, Part1)
                        pcall(destroy, scr)
                        pcall(destroy, scr1)
                        break
                    end
                end
            end
        end
    end
end

for i, v in pairs(getdescendants(c)) do
    if v and v.Parent and (not v:IsDescendantOf(model)) then
        if isa(v, "Decal") then
            v.Transparency = 1
        elseif isa(v, "BasePart") then
            v.Transparency = 1
            v.Anchored = false
        elseif isa(v, "ForceField") then
            v.Visible = false
        elseif isa(v, "Sound") then
            v.Playing = false
        elseif isa(v, "BillboardGui") or isa(v, "SurfaceGui") or isa(v, "ParticleEmitter") or isa(v, "Fire") or isa(v, "Smoke") or isa(v, "Sparkles") then
            v.Enabled = false
        end
    end
end

if newanimate then
    local animate = gp(c, "Animate", "LocalScript")
    if animate then
        animate.Disabled = false
    end
end

if addtools then
    for i, v in pairs(getchildren(c)) do
        if isa(v, "Tool") then
            v.Parent = addtools
        end
    end
end

local hum0, hum1 = model:FindFirstChildOfClass("Humanoid"), c:FindFirstChildOfClass("Humanoid")
if hum0 then
    hum0:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (hum0 and hum0.Parent) then
            hum0 = nil
        end
    end)
end
if hum1 then
    hum1:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (hum1 and hum1.Parent) then
            hum1 = nil
        end
    end)

    ws.CurrentCamera.CameraSubject = hum1
    local camSubCon = nil
    local function camSubFunc()
        camSubCon:Disconnect()
        if c and hum1 then
            ws.CurrentCamera.CameraSubject = hum1
        end
    end
    camSubCon = renderstepped:Connect(camSubFunc)
    if hum0 then
        hum0:GetPropertyChangedSignal("Jump"):Connect(function()
            if hum1 then
                hum1.Jump = hum0.Jump
            end
        end)
    else
        respawnrequest()
    end
end

local rb = Instance.new("BindableEvent", c)
rb.Event:Connect(function()
    pcall(destroy, rb)
    sg:SetCore("ResetButtonCallback", true)
    if destroyhum then
        if c then c:BreakJoints() end
        return
    end
    if model and hum0 and (hum0.Health > 0) then
        model:BreakJoints()
        hum0.Health = 0
    end
    if antirespawn then
        respawnrequest()
    end
end)
sg:SetCore("ResetButtonCallback", rb)

tdelay(0, function()
    while c do
        if hum0 and hum1 then
            hum1.Jump = hum0.Jump
        end
        wait()
    end
    sg:SetCore("ResetButtonCallback", true)
end)

R15toR6 = R15toR6 and hum1 and (hum1.RigType == Enum.HumanoidRigType.R15)
if R15toR6 then
    local part = gp(c, "HumanoidRootPart", "BasePart") or gp(c, "UpperTorso", "BasePart") or gp(c, "LowerTorso", "BasePart") or gp(c, "Head", "BasePart") or c:FindFirstChildWhichIsA("BasePart")
    if part then
        local cfr = part.CFrame
        local R6parts = { 
            head = {
                Name = "Head",
                Size = v3(2, 1, 1),
                R15 = {
                    Head = 0
                }
            },
            torso = {
                Name = "Torso",
                Size = v3(2, 2, 1),
                R15 = {
                    UpperTorso = 0.2,
                    LowerTorso = -0.8
                }
            },
            root = {
                Name = "HumanoidRootPart",
                Size = v3(2, 2, 1),
                R15 = {
                    HumanoidRootPart = 0
                }
            },
            leftArm = {
                Name = "Left Arm",
                Size = v3(1, 2, 1),
                R15 = {
                    LeftHand = -0.849,
                    LeftLowerArm = -0.174,
                    LeftUpperArm = 0.415
                }
            },
            rightArm = {
                Name = "Right Arm",
                Size = v3(1, 2, 1),
                R15 = {
                    RightHand = -0.849,
                    RightLowerArm = -0.174,
                    RightUpperArm = 0.415
                }
            },
            leftLeg = {
                Name = "Left Leg",
                Size = v3(1, 2, 1),
                R15 = {
                    LeftFoot = -0.85,
                    LeftLowerLeg = -0.29,
                    LeftUpperLeg = 0.49
                }
            },
            rightLeg = {
                Name = "Right Leg",
                Size = v3(1, 2, 1),
                R15 = {
                    RightFoot = -0.85,
                    RightLowerLeg = -0.29,
                    RightUpperLeg = 0.49
                }
            }
        }
        for i, v in pairs(getchildren(c)) do
            if isa(v, "BasePart") then
                for i1, v1 in pairs(getchildren(v)) do
                    if isa(v1, "Motor6D") then
                        v1.Part0 = nil
                    end
                end
            end
        end
        part.Archivable = true
        for i, v in pairs(R6parts) do
            local part = clone(part)
            part:ClearAllChildren()
            part.Name, part.Size, part.CFrame, part.Anchored, part.Transparency, part.CanCollide = v.Name, v.Size, cfr, false, 1, false
            for i1, v1 in pairs(v.R15) do
                local R15part = gp(c, i1, "BasePart")
                local att = gp(R15part, "att1_" .. i1, "Attachment")
                if R15part then
                    local weld = Instance.new("Weld")
                    weld.Part0, weld.Part1, weld.C0, weld.C1, weld.Name = part, R15part, cf(0, v1, 0), cf_0, "Weld_" .. i1
                    weld.Parent = R15part
                    R15part.Massless, R15part.Name = true, "R15_" .. i1
                    R15part.Parent = part
                    if att then
                        att.Position = v3(0, v1, 0)
                        att.Parent = part
                    end
                end
            end
            part.Parent = c
            R6parts[i] = part
        end
        local R6joints = {
            neck = {
                Parent = R6parts.torso,
                Name = "Neck",
                Part0 = R6parts.torso,
                Part1 = R6parts.head,
                C0 = cf(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
                C1 = cf(0, -0.5, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
            },
            rootJoint = {
                Parent = R6parts.root,
                Name = "RootJoint" ,
                Part0 = R6parts.root,
                Part1 = R6parts.torso,
                C0 = cf(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
                C1 = cf(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
            },
            rightShoulder = {
                Parent = R6parts.torso,
                Name = "Right Shoulder",
                Part0 = R6parts.torso,
                Part1 = R6parts.rightArm,
                C0 = cf(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
                C1 = cf(-0.5, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0)
            },
            leftShoulder = {
                Parent = R6parts.torso,
                Name = "Left Shoulder",
                Part0 = R6parts.torso,
                Part1 = R6parts.leftArm,
                C0 = cf(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
                C1 = cf(0.5, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
            },
            rightHip = {
                Parent = R6parts.torso,
                Name = "Right Hip",
                Part0 = R6parts.torso,
                Part1 = R6parts.rightLeg,
                C0 = cf(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
                C1 = cf(0.5, 1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0)
            },
            leftHip = {
                Parent = R6parts.torso,
                Name = "Left Hip" ,
                Part0 = R6parts.torso,
                Part1 = R6parts.leftLeg,
                C0 = cf(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
                C1 = cf(-0.5, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
            }
        }
        for i, v in pairs(R6joints) do
            local joint = Instance.new("Motor6D")
            for prop, val in pairs(v) do
                joint[prop] = val
            end
            R6joints[i] = joint
        end
        if hum1 then
            hum1.RigType, hum1.HipHeight = Enum.HumanoidRigType.R6, 0
        end
    end
end

local torso1 = torso
torso = gp(c, "Torso", "BasePart") or ((not R15toR6) and gp(c, torso.Name, "BasePart"))
if (typeof(hedafterneck) == "Instance") and head and torso and torso1 then
    local conNeck, conTorso, conTorso1 = nil, nil, nil
    local aligns = {}
    local function enableAligns()
        conNeck:Disconnect()
        conTorso:Disconnect()
        conTorso1:Disconnect()
        for i, v in pairs(aligns) do
            v.Enabled = true
        end
    end
    conNeck = hedafterneck.Changed:Connect(function(prop)
        if table.find({"Part0", "Part1", "Parent"}, prop) then
            enableAligns()
        end
    end)
    conTorso = torso:GetPropertyChangedSignal("Parent"):Connect(enableAligns)
    conTorso1 = torso1:GetPropertyChangedSignal("Parent"):Connect(enableAligns)
    for i, v in pairs(getdescendants(head)) do
        if isa(v, "AlignPosition") or isa(v, "AlignOrientation") then
            i = tostring(i)
            aligns[i] = v
            v:GetPropertyChangedSignal("Parent"):Connect(function()
                aligns[i] = nil
            end)
            v.Enabled = false
        end
    end
end

local flingpart0 = gp(model, flingpart, "BasePart") or gp(gp(model, flingpart, "Accessory"), "Handle", "BasePart")
local flingpart1 = gp(c, flingpart, "BasePart") or gp(gp(c, flingpart, "Accessory"), "Handle", "BasePart")

local fling = function() end
if flingpart0 and flingpart1 then
    flingpart0:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (flingpart0 and flingpart0.Parent) then
            flingpart0 = nil
            fling = function() end
        end
    end)
    flingpart0.Archivable = true
    flingpart1:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (flingpart1 and flingpart1.Parent) then
            flingpart1 = nil
            fling = function() end
        end
    end)
    local att0 = gp(flingpart0, "att0_" .. flingpart0.Name, "Attachment")
    local att1 = gp(flingpart1, "att1_" .. flingpart1.Name, "Attachment")
    if att0 and att1 then
        att0:GetPropertyChangedSignal("Parent"):Connect(function()
            if not (att0 and att0.Parent) then
                att0 = nil
                fling = function() end
            end
        end)
        att1:GetPropertyChangedSignal("Parent"):Connect(function()
            if not (att1 and att1.Parent) then
                att1 = nil
                fling = function() end
            end
        end)
        local lastfling = nil
        local mouse = lp:GetMouse()
        fling = function(target, duration, rotVelocity)
            if typeof(target) == "Instance" then
                if isa(target, "BasePart") then
                    target = target.Position
                elseif isa(target, "Model") then
                    target = gp(target, "HumanoidRootPart", "BasePart") or gp(target, "Torso", "BasePart") or gp(target, "UpperTorso", "BasePart") or target:FindFirstChildWhichIsA("BasePart")
                    if target then
                        target = target.Position
                    else
                        return
                    end
                elseif isa(target, "Humanoid") then
                    target = target.Parent
                    if not (target and isa(target, "Model")) then
                        return
                    end
                    target = gp(target, "HumanoidRootPart", "BasePart") or gp(target, "Torso", "BasePart") or gp(target, "UpperTorso", "BasePart") or target:FindFirstChildWhichIsA("BasePart")
                    if target then
                        target = target.Position
                    else
                        return
                    end
                else
                    return
                end
            elseif typeof(target) == "CFrame" then
                target = target.Position
            elseif typeof(target) ~= "Vector3" then
                target = mouse.Hit
                if target then
                    target = target.Position
                else
                    return
                end
            end
            if target.Y < ws.FallenPartsDestroyHeight + 5 then
                target = v3(target.X, ws.FallenPartsDestroyHeight + 5, target.Z)
            end
            lastfling = target
            if type(duration) ~= "number" then
                duration = tonumber(duration) or 0.5
            end
            if typeof(rotVelocity) ~= "Vector3" then
                rotVelocity = v3(20000, 20000, 20000)
            end
            if not (target and flingpart0 and flingpart1 and att0 and att1) then
                return
            end
            flingpart0.Archivable = true
            local flingpart = clone(flingpart0)
            flingpart.Transparency = 1
            flingpart.CanCollide = false
            flingpart.Name = "flingpart_" .. flingpart0.Name
            flingpart.Anchored = true
            flingpart.Velocity = v3_0
            flingpart.RotVelocity = v3_0
            flingpart.Position = target
            flingpart:GetPropertyChangedSignal("Parent"):Connect(function()
                if not (flingpart and flingpart.Parent) then
                    flingpart = nil
                end
            end)
            flingpart.Parent = flingpart1
            if flingpart0.Transparency > 0.5 then
                flingpart0.Transparency = 0.5
            end
            att1.Parent = flingpart
            local con = nil
            local rotchg = v3(0, rotVelocity.Unit.Y * -1000, 0)
            con = heartbeat:Connect(function(delta)
                if target and (lastfling == target) and flingpart and flingpart0 and flingpart1 and att0 and att1 then
                    flingpart.Orientation += rotchg * delta
                    flingpart0.RotVelocity = rotVelocity
                else
                    con:Disconnect()
                end
            end)
            if alignmode ~= 4 then
                local con = nil
                con = renderstepped:Connect(function()
                    if flingpart0 and target then
                        flingpart0.RotVelocity = v3_0
                    else
                        con:Disconnect()
                    end
                end)
            end
            twait(duration)
            if lastfling ~= target then
                if flingpart then
                    if att1 and (att1.Parent == flingpart) then
                        att1.Parent = flingpart1
                    end
                    pcall(destroy, flingpart)
                end
                return
            end
            target = nil
            if not (flingpart and flingpart0 and flingpart1 and att0 and att1) then
                return
            end
            flingpart0.RotVelocity = v3_0
            att1.Parent = flingpart1
            pcall(destroy, flingpart)
        end
    end
end

lp:GetMouse().Button1Down:Connect(fling) --click fling

lol = getcustomasset or getsynasset
getgenv().LoadLibrary = function(lib) return loadstring(game:HttpGet("https://raw.githubusercontent.com/Roblox/Core-Scripts/master/CoreScriptsRoot/Libraries/" .. lib .. ".lua"))() end
local plr = game:GetService("Players").LocalPlayer
local mouse = plr:GetMouse()
local char = plr.Character
if char:FindFirstChild("Animate") then
	char.Animate:Destroy()
end
local hum = char:FindFirstChildOfClass("Humanoid")
local tors = char.Torso
local head = char.Head
local rootpart = char.HumanoidRootPart
local RS = tors["Right Shoulder"]
local LS = tors["Left Shoulder"]
local RH = tors["Right Hip"]
local LH = tors["Left Hip"]
local neck = tors.Neck
local rootj = rootpart.RootJoint
local RSnor = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
local LSnor = CFrame.new(-1, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
local RHnor = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
local LHnor = CFrame.new(-1, -1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
local necknor = CFrame.new(0, 1, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
local rootjnor = CFrame.new(0, 0, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
local sine = 0
local rooted = false
local attack = false
local music = Instance.new("Sound")
music.Parent = tors
local timepos = 0
local playing = true
local volume = 2
local song = "rbxassetid://2545298782"
local JevilForm = false
hum.WalkSpeed = 10

-----------------------------------------------------
----------------------Functions----------------------
-----------------------------------------------------

local function SmoothPart(part)
	part.TopSurface = Enum.SurfaceType.Smooth
	part.BottomSurface = Enum.SurfaceType.Smooth
	part.LeftSurface = Enum.SurfaceType.Smooth
	part.RightSurface = Enum.SurfaceType.Smooth
	part.FrontSurface = Enum.SurfaceType.Smooth
	part.BackSurface = Enum.SurfaceType.Smooth
end

local function Effect(Length, Type, SizeStart, SizeEnd, Position, Colour, Parent, Material, CanCollide)
	local part = Instance.new("Part")
	part.Name = Type
	part.Material = Material or Enum.Material.Plastic
	part.CFrame = Position
	part.CanCollide = CanCollide or false
	part.Size = SizeStart
	part.Anchored = true
	part.BrickColor = BrickColor.new(tostring(Colour))
	part.Parent = Parent or workspace
	if Type == "Block" then
		SmoothPart(part)
	end
	if Type == "Sphere" then
		part.Shape = Enum.PartType.Ball
		SmoothPart(part)
	end
	if Type == "TwirlSwirl" or Type == "Swirl" then
		local mesh = Instance.new("SpecialMesh")
		mesh.MeshType = Enum.MeshType.FileMesh
		mesh.MeshId = "rbxassetid://662585058"
		mesh.Name = "SwirlMesh"
		mesh.Scale = SizeStart / Vector3.new(500, 500, 500)
		mesh.Parent = part
	end
	if Type == "Wave" or Type == "SpiralWave" then
		local mesh = Instance.new("SpecialMesh")
		mesh.MeshType = Enum.MeshType.FileMesh
		mesh.MeshId = "rbxassetid://20329976"
		mesh.Name = "WaveMesh"
		mesh.Scale = SizeStart / Vector3.new(4, 4, 4)
		mesh.Parent = part
	end
	if Type == "MeshSphere" then
		local mesh = Instance.new("SpecialMesh")
		mesh.MeshType = Enum.MeshType.Sphere
		mesh.Parent = part
		SmoothPart(part)
	end
	if Type == "Cylinder" then
		part.Shape = Enum.PartType.Cylinder
		SmoothPart(part)
	end
	if Type == "KillSphere" then
		part.Shape = Enum.PartType.Cylinder
		part.Transparency = 1
		part.Touched:Connect(function()
		end)
	end
	spawn(function()
		local TwirlAngle = math.random(-250, 250) / 1000
		local WaveAngle = math.random(-500, 500) / 1000
		for i = 1, Length do
			game:GetService("RunService").RenderStepped:Wait()
			part.Transparency = part.Transparency + 1 / Length
			part.Size = part.Size + SizeEnd / Vector3.new(Length, Length, Length)
			if Type == "TwirlSwirl" then
				part.CFrame = part.CFrame * CFrame.Angles(TwirlAngle, TwirlAngle, TwirlAngle)
				part.SwirlMesh.Scale = part.SwirlMesh.Scale + SizeEnd / Vector3.new(Length * 500, Length * 500, Length * 500)
			end
			if Type == "Swirl" then
				part.CFrame = part.CFrame * CFrame.Angles(0, TwirlAngle, 0)
				part.SwirlMesh.Scale = part.SwirlMesh.Scale + SizeEnd / Vector3.new(Length * 500, Length * 500, Length * 500)
			end
			if Type == "SpiralWave" then
				part.CFrame = part.CFrame * CFrame.Angles(WaveAngle, WaveAngle, WaveAngle)
				part.WaveMesh.Scale = part.WaveMesh.Scale + SizeEnd / Vector3.new(Length * 4, Length * 4, Length * 4)
			end
			if Type == "Wave" then
				part.CFrame = part.CFrame * CFrame.Angles(0, WaveAngle, 0)
				part.WaveMesh.Scale = part.WaveMesh.Scale + SizeEnd / Vector3.new(Length * 4, Length * 4, Length * 4)
			end
			if Type == "KillSphere" then
				for i,v in pairs(part:GetTouchingParts()) do
					if v.Parent and v.Parent:FindFirstChildOfClass("Humanoid") and not v:IsDescendantOf(char) then
						v.Parent:BreakJoints()
					end
				end
			end
		end
		part:Destroy()
	end)
end

-----------------------------------------------------
----------------------Creations----------------------
-----------------------------------------------------

local hat = Instance.new("Part")
hat.Name = "JevilHat"
hat.Size = Vector3.new(1, 1, 1)
hat.CanCollide = false
hat.Parent = char
local mesh = Instance.new("SpecialMesh")
mesh.MeshType = Enum.MeshType.FileMesh
mesh.MeshId = "rbxassetid://193760002"
mesh.TextureId = "rbxassetid://193760041"
mesh.VertexColor = Vector3.new(0.5, 0, 0.5)
mesh.Parent = hat
local weld = Instance.new("Weld")
weld.Part0 = head
weld.Part1 = hat
weld.C0 = CFrame.new(0, 0.5, 0.31)
weld.Parent = hat
local shirt = Instance.new("Shirt")
shirt.Name = "Cloth"
shirt.ShirtTemplate = "rbxassetid://2544612637"
shirt.Parent = char
local pants = Instance.new("Pants")
pants.Name = "Cloth"
pants.PantsTemplate = "rbxassetid://2544611861"
pants.Parent = char

-----------------------------------------------------
-----------------Attacking functions-----------------
-----------------------------------------------------

game:GetService("UserInputService").InputBegan:Connect(function(input, isTyping)
	if isTyping == false and input.UserInputType == Enum.UserInputType.Keyboard and attack == false then
		if JevilForm == false then
			if input.KeyCode == Enum.KeyCode.T then
				attack = true
				local sound = Instance.new("Sound")
				sound.SoundId = "rbxassetid://2545211765"
				sound.Volume = 5
				sound.Parent = head
				sound:Play()
				repeat
					game:GetService("RunService").RenderStepped:Wait()
					RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(0, -0.3, 2), 0.15)
					LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4, 0, 0), 0.15)
					rootj.C0 = rootj.C0:Lerp(rootjnor, 0.15)
					neck.C0 = neck.C0:Lerp(necknor, 0.15)
				until sound.Playing == false
				attack = false
			end
			if input.KeyCode == Enum.KeyCode.F then
				attack = true
				rooted = true
				playing = false
				for i = 1, 90 do
					game:GetService("RunService").RenderStepped:Wait()
					RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, math.sin(sine / 20) / 8, 0), 0.15)
					LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, -math.sin(sine / 20) / 8, 0), 0.15)
					RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 16, 0, 0), 0.15)
					LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 16, 0, 0), 0.15)
					rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.new(0, 0, 2 + 0.2 * math.sin(sine / 20)), 0.1)
					neck.C0 = neck.C0:Lerp(necknor, 0.15)
				end
				local sound = Instance.new("Sound")
				sound.SoundId = "rbxassetid://2545010175"
				sound.Volume = 5
				sound.Parent = head
				sound:Play()
				repeat
					game:GetService("RunService").RenderStepped:Wait()
					RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, math.sin(sine / 20) / 8, 0), 0.15)
					LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, -math.sin(sine / 20) / 8, 0), 0.15)
					RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.new(0, 0, 2 + 0.2 * math.sin(sine / 20)), 0.1)
					neck.C0 = neck.C0:Lerp(necknor, 0.15)
				until sound.Playing == false
				for i = 1, 30 do
					game:GetService("RunService").RenderStepped:Wait()
					RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, math.sin(sine / 20) / 8, 0), 0.15)
					LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, -math.sin(sine / 20) / 8, 0), 0.15)
					RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.new(0, 0, 2 + 0.2 * math.sin(sine / 20)), 0.1)
					neck.C0 = neck.C0:Lerp(necknor, 0.15)
				end
				if math.random(1, 100) == 1 then
					song = "rbxassetid://2582332053"
				else
					volume = 0.5
					song = "rbxassetid://2597271983"
				end
				music.TimePosition = 0
				hum.HipHeight = 2
				playing = true
				JevilForm = true
				attack = false
				rooted = false
				hum.WalkSpeed = 20
				hum.JumpPower = 50
			end
		end
		if JevilForm == true then
			if input.KeyCode == Enum.KeyCode.Z then
				attack = true
				rooted = true
				local sound = Instance.new("Sound")
				sound.SoundId = "rbxassetid://2545008459"
				sound.Volume = 10
				sound.Parent = head
				sound:Play()
				repeat
					game:GetService("RunService").RenderStepped:Wait()
					RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, math.sin(sine / 20) / 8, 0), 0.15)
					LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, -math.sin(sine / 20) / 8, 0), 0.15)
					RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.new(0, 0, 0.2 * math.sin(sine / 20)), 0.1)
					neck.C0 = neck.C0:Lerp(necknor, 0.15)
				until sound.Playing == false
				for i = 1, 10 do
					for i = 1, 15 do
						game:GetService("RunService").RenderStepped:Wait()
						for i,v in pairs(char:GetDescendants()) do
							if v:IsA("Part") and v.Name ~= "HumanoidRootPart" then
								v.Transparency = v.Transparency + 1 / 15
							end
							if v:IsA("Decal") then
								v.Transparency = v.Transparency + 1 / 15
							end
						end
						RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4, 0, 0), 0.15)
						LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4, 0, 0), 0.15)
						RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2, 0, 0), 0.15)
						LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2, 0, 0), 0.15)
						rootj.C0 = rootj.C0:Lerp(rootjnor, 0.1)
						neck.C0 = neck.C0:Lerp(necknor, 0.15)
					end
					local oldpos = rootpart.Position
					local dist = (rootpart.Position - mouse.Hit.Position).Magnitude
					if dist > 30 then
						dist = 30
					end
					rootpart.CFrame = CFrame.new(oldpos + CFrame.new(oldpos, mouse.Hit.Position).LookVector * dist + Vector3.new(0, 6, 0), Vector3.new(oldpos.X, rootpart.Position.Y, oldpos.Z)) * CFrame.Angles(0, math.pi, 0)
					for i = 1, 15 do
						game:GetService("RunService").RenderStepped:Wait()
						for i,v in pairs(char:GetDescendants()) do
							if v:IsA("Part") and v.Name ~= "HumanoidRootPart" then
								v.Transparency = v.Transparency - 1 / 15
							end
							if v:IsA("Decal") then
								v.Transparency = v.Transparency - 1 / 15
							end
						end
						RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4, 0, 0), 0.15)
						LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4, 0, 0), 0.15)
						RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2, 0, 0), 0.15)
						LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2, 0, 0), 0.15)
						rootj.C0 = rootj.C0:Lerp(rootjnor, 0.1)
						neck.C0 = neck.C0:Lerp(necknor, 0.15)
					end
					for i,v in pairs(char:GetDescendants()) do
						if v:IsA("Part") and v.Name ~= "HumanoidRootPart" then
							v.Transparency = 0
						end
						if v:IsA("Decal") then
							v.Transparency = 0
						end
					end
					local sound = Instance.new("Sound")
					sound.SoundId = "rbxassetid://2545012765"
					sound.Volume = 10
					sound.Parent = head
					sound:Play()
					for amount = 1, 5 do
						local spade = Instance.new("Part")
						spade.Name = "Spade"
						spade.Anchored = true
						spade.CanCollide = false
						spade.Size = Vector3.new(1, 0.05, 1)
						if amount == 1 then
							spade.CFrame = CFrame.new(head.Position, mouse.Hit.Position) * CFrame.Angles(0, math.pi / 2, 0)
						elseif amount == 2 then
							spade.CFrame = CFrame.new(head.Position, mouse.Hit.Position) * CFrame.Angles(0, math.rad(100), 0)
						elseif amount == 3 then
							spade.CFrame = CFrame.new(head.Position, mouse.Hit.Position) * CFrame.Angles(0, math.rad(80), 0)
						elseif amount == 4 then
							spade.CFrame = CFrame.new(head.Position, mouse.Hit.Position) * CFrame.Angles(0, math.rad(110), 0)
						elseif amount == 5 then
							spade.CFrame = CFrame.new(head.Position, mouse.Hit.Position) * CFrame.Angles(0, math.rad(70), 0)
						end
						spade.Parent = char
						local decal1 = Instance.new("Decal")
						decal1.Texture = "rbxassetid://2700856195"
						decal1.Face = Enum.NormalId.Top
						decal1.Parent = spade
						local decal2 = Instance.new("Decal")
						decal2.Texture = "rbxassetid://2700856195"
						decal2.Face = Enum.NormalId.Bottom
						decal2.Parent = spade
						local debounce = false
						spade.Touched:Connect(function(hit)
						end)
						spawn(function()
							for i = 1, 180 do
								game:GetService("RunService").RenderStepped:Wait()
								for i,v in pairs(spade:GetTouchingParts()) do
									if not v:IsDescendantOf(char) and debounce == false then
										if v.Parent and v.Parent:FindFirstChildOfClass("Humanoid") then
											debounce = true
											v.Parent:FindFirstChildOfClass("Humanoid").Health = v.Parent:FindFirstChildOfClass("Humanoid").Health - 20
											coroutine.resume(coroutine.create(function()
												wait(0.4)
												debounce = false
											end))
										end
									end
								end
								spade.Transparency = 1
								spade.CFrame = spade.CFrame * CFrame.new(0.5, 0, 0)
							end
							for i = 1, 10 do
								game:GetService("RunService").RenderStepped:Wait()
								spade.CFrame = spade.CFrame * CFrame.new(0.5, 0, 0)
								decal1.Transparency = decal1.Transparency + 0.1
								decal2.Transparency = decal2.Transparency + 0.1
							end
							spade:Destroy()
						end)
					end
					for i = 1, 10 do
						game:GetService("RunService").RenderStepped:Wait()
						RS.C0 = RSnor * CFrame.Angles(-2.5, 0, 0) * CFrame.new(0, 0, -1) + Vector3.new(0, 0.7, 0)
						LS.C0 = LSnor * CFrame.Angles(-2.5, 0, 0) * CFrame.new(0, 0, -1) + Vector3.new(0, 0.7, 0)
						RH.C0 = RHnor * CFrame.Angles(-1, 0, 0)
						LH.C0 = LHnor * CFrame.Angles(-1, 0, 0)
						rootj.C0 = rootjnor
						neck.C0 = necknor
					end
				end
				attack = false
				rooted = false
				hum.WalkSpeed = 20
				hum.JumpPower = 50
			end
			if input.KeyCode == Enum.KeyCode.X then
				attack = true
				for i = 1, 4 do
					local model = Instance.new("Model")
					model.Name = "Spades"
					model.Parent = char
					local mainpart = Instance.new("Part")
					mainpart.Transparency = 1
					mainpart.CanCollide = false
					mainpart.Anchored = true
					mainpart.CFrame = CFrame.new(mouse.Hit.Position) * CFrame.new(0, 3, 0)
					mainpart.Parent = model
					model.PrimaryPart = mainpart
					local spades = {}
					for i = 1, 10 do
						local spade = Instance.new("Part")
						spade.Name = "Spade"
						spade.Transparency = 1
						spade.Anchored = true
						spade.CanCollide = false
						spade.Size = Vector3.new(2, 0.05, 2)
						spade.Parent = model
						local decal1 = Instance.new("Decal")
						decal1.Texture = "rbxassetid://2700856195"
						decal1.Face = Enum.NormalId.Top
						decal1.Transparency = 1
						decal1.Parent = spade
						local decal2 = Instance.new("Decal")
						decal2.Texture = "rbxassetid://2700856195"
						decal2.Face = Enum.NormalId.Bottom
						decal2.Transparency = 1
						decal2.Parent = spade
						local debounce = false
						spade.Touched:Connect(function(hit)
						end)
						table.insert(spades, spade)
					end
					for i = 1, #spades do
						spades[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad((360 / #spades) * i) + math.pi / 2, 0) * CFrame.new(-20, 0, 0)
					end
					for x = 20, 10, -0.5 do
						game:GetService("RunService").RenderStepped:Wait()
						mainpart.CFrame = CFrame.new(mouse.Hit.Position) * CFrame.new(0, 3, 0)
						for i = 1, #spades do
							for i,v in pairs(spades[i]:GetChildren()) do
								if v:IsA("Decal") then
									v.Transparency = v.Transparency - 0.05
								end
							end
							spades[i].CFrame = spades[i].CFrame:Lerp(mainpart.CFrame * CFrame.Angles(0, math.rad((360 / #spades) * i) + math.pi / 2, 0) * CFrame.new(-x, 0, 0), 0.15)
						end
					end
					for i = 1, 35 do
						game:GetService("RunService").RenderStepped:Wait()
						mainpart.CFrame = CFrame.new(mouse.Hit.Position) * CFrame.new(0, 3, 0)
						for i = 1, #spades do
							spades[i].CFrame = spades[i].CFrame:Lerp(mainpart.CFrame * CFrame.Angles(0, math.rad((360 / #spades) * i) + math.pi / 2, 0) * CFrame.new(-10, 0, 0), 0.15)
						end
					end
					coroutine.resume(coroutine.create(function()
						for i = 1, #spades do
							coroutine.resume(coroutine.create(function()
								for x = 10, 13, 0.3 do
									game:GetService("RunService").RenderStepped:Wait()
									spades[i].CFrame = spades[i].CFrame:Lerp(mainpart.CFrame * CFrame.Angles(0, math.rad((360 / #spades) * i) + math.pi / 2, 0) * CFrame.new(-x, 0, 0), 0.15)
								end
								for x = 1, 15 do
									game:GetService("RunService").RenderStepped:Wait()
									spades[i].CFrame = spades[i].CFrame:Lerp(mainpart.CFrame * CFrame.Angles(0, math.rad((360 / #spades) * i) + math.pi / 2, 0) * CFrame.new(-13, 0, 0), 0.15)
								end
								local debounce = false
								for x = 0, 0.5, 0.025 do
									game:GetService("RunService").RenderStepped:Wait()
									for i,v in pairs(spades[i]:GetTouchingParts()) do
										if not v:IsDescendantOf(char) and debounce == false then
											if v.Parent and v.Parent:FindFirstChildOfClass("Humanoid") then
												debounce = true
												v.Parent:FindFirstChildOfClass("Humanoid").Health = v.Parent:FindFirstChildOfClass("Humanoid").Health - 20
												coroutine.resume(coroutine.create(function()
													wait(0.4)
													debounce = false
												end))
											end
										end
									end
									spades[i].CFrame = spades[i].CFrame * CFrame.new(x, 0, 0)
								end
								for x = 0.5, 1, 0.025 do
									game:GetService("RunService").RenderStepped:Wait()
									for i,v in pairs(spades[i]:GetChildren()) do
										if v:IsA("Decal") then
											v.Transparency = v.Transparency + 0.05
										end
									end
									for i,v in pairs(spades[i]:GetTouchingParts()) do
										if not v:IsDescendantOf(char) and debounce == false then
											if v.Parent and v.Parent:FindFirstChildOfClass("Humanoid") then
												debounce = true
												v.Parent:FindFirstChildOfClass("Humanoid").Health = v.Parent:FindFirstChildOfClass("Humanoid").Health - 5
												coroutine.resume(coroutine.create(function()
													wait(0.4)
													debounce = false
												end))
											end
										end
									end
									spades[i].CFrame = spades[i].CFrame * CFrame.new(x, 0, 0)
								end
								spades[i]:Destroy()
							end))
							wait(0.05)
						end
					end))
					wait(1)
					coroutine.resume(coroutine.create(function()
						wait(1.4)
						model:Destroy()
					end))
				end
				attack = false
			end
			if input.KeyCode == Enum.KeyCode.C then
				attack = true
				rooted = true
				local sound = Instance.new("Sound")
				sound.SoundId = "rbxassetid://2545011398"
				sound.Volume = 10
				sound.Parent = head
				sound:Play()
				repeat
					game:GetService("RunService").RenderStepped:Wait()
					RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, math.sin(sine / 20) / 8, 0), 0.15)
					LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, -math.sin(sine / 20) / 8, 0), 0.15)
					RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.new(0, 0, 0.2 * math.sin(sine / 20)), 0.1)
					neck.C0 = neck.C0:Lerp(necknor, 0.15)
				until sound.Playing == false
				rooted = false
				hum.WalkSpeed = 20
				hum.JumpPower = 50
				local model = Instance.new("Model")
				model.Name = "Devs"
				model.Parent = char
				local mainpart = Instance.new("Part")
				mainpart.Transparency = 1
				mainpart.CanCollide = false
				mainpart.Anchored = true
				mainpart.CFrame = CFrame.new(mouse.Hit.Position) * CFrame.new(0, 3, 0)
				mainpart.Parent = model
				model.PrimaryPart = mainpart
				local devs = {}
				local devsine = 0
				for i = 1, 4 do
					local dev = Instance.new("Part")
					dev.Name = "Devilsknife"
					dev.Transparency = 1
					dev.Anchored = true
					dev.CanCollide = false
					dev.Size = Vector3.new(4, 0.05, 4.6)
					dev.Parent = model
					local decal1 = Instance.new("Decal")
					decal1.Texture = "rbxassetid://2704176861"
					decal1.Face = Enum.NormalId.Top
					decal1.Transparency = 1
					decal1.Parent = dev
					local decal2 = Instance.new("Decal")
					decal2.Texture = "rbxassetid://2704176861"
					decal2.Face = Enum.NormalId.Bottom
					decal2.Transparency = 1
					decal2.Parent = dev
					dev.Touched:Connect(function(hit)
					end)
					table.insert(devs, dev)
				end
				local spin = 0
				for i = 1, 15 do
					game:GetService("RunService").RenderStepped:Wait()
					spin = spin + 12
					devsine = devsine + 1
					mainpart.CFrame = CFrame.new(mouse.Hit.Position) * CFrame.new(0, 3, 0)
					for i = 1, #devs do
						for i,v in pairs(devs[i]:GetChildren()) do
							if v:IsA("Decal") then
								v.Transparency = v.Transparency - 1 / 15
							end
						end
						if i == 1 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(math.sin(sine / 40) * 4, 0, math.sin(sine / 40) * 10)
						elseif i == 2 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(-math.sin(sine / 40) * 4, 0, -math.sin(sine / 40) * 10)
						elseif i == 3 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(math.sin(sine / 40) * 4, 0, -math.sin(sine / 40) * 10)
						elseif i == 4 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(-math.sin(sine / 40) * 4, 0, math.sin(sine / 40) * 10)
						end
					end
				end
				local debounce = {}
				for i = 1, #devs do
					debounce[i] = false
				end
				for i = 1, 500 do
					game:GetService("RunService").RenderStepped:Wait()
					spin = spin + 12
					devsine = devsine + 1
					mainpart.CFrame = CFrame.new(mouse.Hit.Position) * CFrame.new(0, 3, 0)
					for i = 1, #devs do
						for i,v in pairs(devs[i]:GetTouchingParts()) do
							if not v:IsDescendantOf(char) and debounce[i] == false then
								if v.Parent and v.Parent:FindFirstChildOfClass("Humanoid") then
									debounce[i] = true
									v.Parent:FindFirstChildOfClass("Humanoid").Health = v.Parent:FindFirstChildOfClass("Humanoid").Health - 5
									coroutine.resume(coroutine.create(function()
										wait(0.4)
										debounce[i] = false
									end))
								end
							end
						end
					end
					for i = 1, #devs do
						if i == 1 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(math.sin(sine / 40) * 4, 0, math.sin(sine / 40) * 10)
						elseif i == 2 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(-math.sin(sine / 40) * 4, 0, -math.sin(sine / 40) * 10)
						elseif i == 3 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(math.sin(sine / 40) * 4, 0, -math.sin(sine / 40) * 10)
						elseif i == 4 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(-math.sin(sine / 40) * 4, 0, math.sin(sine / 40) * 10)
						end
					end
				end
				for i = 1, 15 do
					game:GetService("RunService").RenderStepped:Wait()
					for i = 1, #devs do
						for i,v in pairs(devs[i]:GetChildren()) do
							if v:IsA("Decal") then
								v.Transparency = v.Transparency + 1 / 15
							end
						end
						if i == 1 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(math.sin(sine / 40) * 4, 0, math.sin(sine / 40) * 10)
						elseif i == 2 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(-math.sin(sine / 40) * 4, 0, -math.sin(sine / 40) * 10)
						elseif i == 3 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(math.sin(sine / 40) * 4, 0, -math.sin(sine / 40) * 10)
						elseif i == 4 then
							devs[i].CFrame = mainpart.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(-math.sin(sine / 40) * 4, 0, math.sin(sine / 40) * 10)
						end
					end
				end
				model:Destroy()
				attack = false
			end
			if input.KeyCode == Enum.KeyCode.V then
				attack = true
				rooted = true
				local sound = Instance.new("Sound")
				sound.SoundId = "rbxassetid://2544975373"
				sound.Volume = 10
				sound.Parent = head
				sound:Play()
				repeat
					game:GetService("RunService").RenderStepped:Wait()
					RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, math.sin(sine / 20) / 8, 0), 0.15)
					LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, -math.sin(sine / 20) / 8, 0), 0.15)
					RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.new(0, 0, 0.2 * math.sin(sine / 20)), 0.1)
					neck.C0 = neck.C0:Lerp(necknor, 0.15)
				until sound.Playing == false
				rooted = false
				hum.WalkSpeed = 20
				hum.JumpPower = 50
				for i = 1, 60 do
					local diamond = Instance.new("Part")
					diamond.Name = "Devilsknife"
					diamond.Transparency = 1
					diamond.Anchored = true
					diamond.CanCollide = false
					diamond.Size = Vector3.new(3, 0.05, 2)
					diamond.Parent = char
					local decal1 = Instance.new("Decal")
					decal1.Texture = "rbxassetid://2707737978"
					decal1.Face = Enum.NormalId.Top
					decal1.Transparency = 1
					decal1.Parent = diamond
					local decal2 = Instance.new("Decal")
					decal2.Texture = "rbxassetid://2707737978"
					decal2.Face = Enum.NormalId.Bottom
					decal2.Transparency = 1
					decal2.Parent = diamond
					diamond.Touched:Connect(function(hit)
					end)
					diamond.CFrame = CFrame.new(mouse.Hit.Position) * CFrame.new(0, 3, math.random(-100, 100) / 25)
					coroutine.resume(coroutine.create(function()
						local movespeed = 0
						for i = 1, 15 do
							game:GetService("RunService").RenderStepped:Wait()
							for i,v in pairs(diamond:GetChildren()) do
								if v:IsA("Decal") then
									v.Transparency = v.Transparency - 1 / 15
								end
							end
						end
						local debounce = false
						for i = 1, 90 do
							game:GetService("RunService").RenderStepped:Wait()
							movespeed = movespeed + 0.01
							diamond.CFrame = diamond.CFrame * CFrame.new(movespeed, 0, 0)
							for i,v in pairs(diamond:GetTouchingParts()) do
								if not v:IsDescendantOf(char) and debounce == false then
									if v.Parent and v.Parent:FindFirstChildOfClass("Humanoid") then
										debounce = true
										v.Parent:FindFirstChildOfClass("Humanoid").Health = v.Parent:FindFirstChildOfClass("Humanoid").Health - 10
										coroutine.resume(coroutine.create(function()
											wait(0.4)
											debounce = false
										end))
									end
								end
							end
						end
						for i = 1, 15 do
							game:GetService("RunService").RenderStepped:Wait()
							movespeed = movespeed + 0.01
							for i,v in pairs(diamond:GetChildren()) do
								if v:IsA("Decal") then
									v.Transparency = v.Transparency + 1 / 15
								end
							end
							diamond.CFrame = diamond.CFrame * CFrame.new(movespeed, 0, 0)
						end
						diamond:Destroy()
					end))
					wait(0.1)
				end
				attack = false
			end
			if input.KeyCode == Enum.KeyCode.B and hum.Health <= 30 then
				attack = true
				rooted = true
				local sound = Instance.new("Sound")
				sound.SoundId = "rbxassetid://2545011398"
				sound.Volume = 10
				sound.Parent = head
				sound:Play()
				repeat
					game:GetService("RunService").RenderStepped:Wait()
					RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, math.sin(sine / 20) / 8, 0), 0.15)
					LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, -math.sin(sine / 20) / 8, 0), 0.15)
					RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
					rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.new(0, 0, 0.2 * math.sin(sine / 20)), 0.1)
					neck.C0 = neck.C0:Lerp(necknor, 0.15)
				until sound.Playing == false
				rooted = false
				hum.WalkSpeed = 20
				hum.JumpPower = 50
				local sound = Instance.new("Sound")
				sound.SoundId = "rbxassetid://2545211516"
				sound.Volume = 10
				sound.Parent = head
				sound:Play()
				repeat
					game:GetService("RunService").RenderStepped:Wait()
				until sound.Playing == false
				local ticking = 0.6
				for i = 1, 40 do
					local dev = Instance.new("Part")
					dev.Name = "Devilsknife"
					dev.Transparency = 1
					dev.Anchored = true
					dev.CanCollide = false
					dev.Size = Vector3.new(4, 0.05, 4.6)
					dev.Parent = char
					local decal1 = Instance.new("Decal")
					decal1.Texture = "rbxassetid://2704176861"
					decal1.Face = Enum.NormalId.Top
					decal1.Transparency = 1
					decal1.Parent = dev
					local decal2 = Instance.new("Decal")
					decal2.Texture = "rbxassetid://2704176861"
					decal2.Face = Enum.NormalId.Bottom
					decal2.Transparency = 1
					decal2.Parent = dev
					dev.Touched:Connect(function(hit)
					end)
					dev.CFrame = CFrame.new(mouse.Hit.Position) * CFrame.Angles(0, 0, math.pi / 2) + Vector3.new(0, 50, 0)
					local spin = 0
					local fallspeed = 0
					coroutine.resume(coroutine.create(function()
						local debounce = false
						for i = 1, 60 do
							game:GetService("RunService").RenderStepped:Wait()
							if i <= 15 then
								for i,v in pairs(dev:GetChildren()) do
									if v:IsA("Decal") then
										v.Transparency = v.Transparency - 1 / 15
									end
								end
							end
							for i,v in pairs(dev:GetTouchingParts()) do
								if not v:IsDescendantOf(char) and debounce == false then
									if v.Parent and v.Parent:FindFirstChildOfClass("Humanoid") then
										debounce = true
										v.Parent:FindFirstChildOfClass("Humanoid").Health = v.Parent:FindFirstChildOfClass("Humanoid").Health - 10
										coroutine.resume(coroutine.create(function()
											wait(0.4)
											debounce = false
										end))
									end
								end
							end
							spin = spin + 12
							fallspeed = fallspeed + 0.06
							dev.CFrame = dev.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(0, -fallspeed, 0)
						end
						dev:Destroy()
					end))
					wait(ticking)
					if ticking > 0.2 then
						ticking = ticking - 0.05
					end
				end
				local sound = Instance.new("Sound")
				sound.SoundId = "rbxassetid://2545018472"
				sound.Volume = 10
				sound.Parent = head
				sound:Play()
				repeat
					game:GetService("RunService").RenderStepped:Wait()
				until sound.Playing == false
				for i = 1, 10 do
					local dev = Instance.new("Part")
					dev.Name = "Devilsknife"
					dev.Transparency = 1
					dev.Anchored = true
					dev.CanCollide = false
					dev.Size = Vector3.new(4, 0.05, 4.6)
					dev.Parent = char
					local decal1 = Instance.new("Decal")
					decal1.Texture = "rbxassetid://2704176861"
					decal1.Face = Enum.NormalId.Top
					decal1.Transparency = 1
					decal1.Parent = dev
					local decal2 = Instance.new("Decal")
					decal2.Texture = "rbxassetid://2704176861"
					decal2.Face = Enum.NormalId.Bottom
					decal2.Transparency = 1
					decal2.Parent = dev
					dev.Touched:Connect(function(hit)
					end)
					dev.CFrame = CFrame.new(mouse.Hit.Position) * CFrame.Angles(0, 0, math.pi / 2) + Vector3.new(0, 50, 0)
					local spin = 0
					local fallspeed = 0
					coroutine.resume(coroutine.create(function()
						local debounce = false
						for i = 1, 60 do
							game:GetService("RunService").RenderStepped:Wait()
							if i <= 15 then
								for i,v in pairs(dev:GetChildren()) do
									if v:IsA("Decal") then
										v.Transparency = v.Transparency - 1 / 15
									end
								end
							end
							for i,v in pairs(dev:GetTouchingParts()) do
								if not v:IsDescendantOf(char) and debounce == false then
									if v.Parent and v.Parent:FindFirstChildOfClass("Humanoid") then
										debounce = true
										v.Parent:FindFirstChildOfClass("Humanoid").Health = v.Parent:FindFirstChildOfClass("Humanoid").Health - 10
										coroutine.resume(coroutine.create(function()
											wait(0.4)
											debounce = false
										end))
									end
								end
							end
							spin = spin + 12
							fallspeed = fallspeed + 0.06
							dev.CFrame = dev.CFrame * CFrame.Angles(0, math.rad(spin), 0) + Vector3.new(0, -fallspeed, 0)
						end
						dev:Destroy()
					end))
					wait(ticking)
					if ticking > 0.2 then
						ticking = ticking - 0.05
					end
				end
				local giantdev = Instance.new("Part")
				giantdev.Name = "Devilsknife"
				giantdev.Transparency = 1
				giantdev.Anchored = true
				giantdev.CanCollide = false
				giantdev.Size = Vector3.new(60, 0.05, 62)
				giantdev.Parent = char
				local decal1 = Instance.new("Decal")
				decal1.Texture = "rbxassetid://2704176861"
				decal1.Face = Enum.NormalId.Top
				decal1.Transparency = 1
				decal1.Parent = giantdev
				local decal2 = Instance.new("Decal")
				decal2.Texture = "rbxassetid://2704176861"
				decal2.Face = Enum.NormalId.Bottom
				decal2.Transparency = 1
				decal2.Parent = giantdev
				giantdev.Touched:Connect(function(hit)
				end)
				giantdev.CFrame = CFrame.new(mouse.Hit.Position) * CFrame.Angles(math.rad(105), 0, math.pi / 2) + Vector3.new(0, 100, 0)
				for i = 1, 180 do
					game:GetService("RunService").RenderStepped:Wait()
					if i <= 15 then
						for i,v in pairs(giantdev:GetChildren()) do
							if v:IsA("Decal") then
								v.Transparency = v.Transparency - 1 / 15
							end
						end
					end
					giantdev.CFrame = giantdev.CFrame + Vector3.new(0, -0.7, 0, 0)
				end
				Effect(60, "Sphere", Vector3.new(30, 30, 30), Vector3.new(150, 150, 150), CFrame.new(giantdev.Position) + Vector3.new(0, -40, 0), BrickColor.new("Institutional white"), char)
				Effect(60, "KillSphere", Vector3.new(30, 30, 30), Vector3.new(150, 150, 150), CFrame.new(giantdev.Position) + Vector3.new(0, -40, 0), BrickColor.new("Institutional white"), char)
				for i = 1, 5 do
					Effect(60, "Wave", Vector3.new(90, 15, 90), Vector3.new(450, 75, 450), CFrame.new(giantdev.Position) + Vector3.new(0, 28, 0), BrickColor.new("Mid gray"), char)
				end
				giantdev:Destroy()
				wait(1)
				attack = false
			end
		end
	end
end)

-----------------------------------------------------
---------------------Wrapping up---------------------
-----------------------------------------------------

while game:GetService("RunService").RenderStepped:Wait() do
	sine = sine + 1
	for i,v in pairs(hum:GetPlayingAnimationTracks()) do
		v:Stop()
	end
	for i,v in pairs(char:GetChildren()) do
		if v:IsA("Accessory") then
			v:Destroy()
		end
		if v.Name == "Head" then
			for i,v in pairs(v:GetChildren()) do
				if v:IsA("Decal") then
					v.Texture = "rbxassetid://241553801"
				end
			end
			v.Color = Color3.new(180 / 255, 180 / 255, 228 / 255)
		end
		if v.Name == "Left Leg" or v.Name == "Right Leg" then
			v.Color = Color3.new(180 / 255, 180 / 255, 228 / 255)
		end
		if (v:IsA("Shirt") or v:IsA("Pants")) and v.Name ~= "Cloth" then
			v:Destroy()
		end
		if v:IsA("BodyColors") then
			v:Destroy()
		end
	end
	if music.Parent == tors then
		music.SoundId = song
		music.Volume = volume
		music.Name = "JevilTheme"
		music.Looped = true
		music.PlaybackSpeed = 1
		music.Playing = playing
		timepos = music.TimePosition
	else
		music = Instance.new("Sound")
		music.TimePosition = timepos
		music.SoundId = song
		music.Volume = volume
		music.Name = "JevilTheme"
		music.Looped = true
		music.PlaybackSpeed = 1
		music.Parent = tors
		music.Playing = playing
	end
	if rooted then
		hum.WalkSpeed = 0
		hum.JumpPower = 0
	end
	local torsvel = (tors.Velocity * Vector3.new(1, 0, 1)).Magnitude
	local hitfloor = workspace:FindPartOnRay(Ray.new(char.HumanoidRootPart.CFrame.Position, ((CFrame.new(char.HumanoidRootPart.Position, char.HumanoidRootPart.Position - Vector3.new(0, 1, 0))).LookVector).Unit * 4), char)
	if attack == false then
		if JevilForm == false then
			if torsvel < 1 and hitfloor then
				RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, math.sin(sine / 20) / 8, 0), 0.15)
				LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, -math.sin(sine / 20) / 8, 0), 0.15)
				RH.C0 = RH.C0:Lerp(RHnor * CFrame.new(0, -0.2 * math.sin(sine / 20), 0), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.new(0, -0.2 * math.sin(sine / 20), 0), 0.15)
				rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.new(0, 0, 0.2 * math.sin(sine / 20)), 0.15)
				neck.C0 = neck.C0:Lerp(necknor, 0.15)
			end
			if torsvel > 1 and hitfloor then
				RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.1, 0, math.sin(sine / 7)), 0.15)
				LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.1, 0, math.sin(sine / 7)), 0.15)
				RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(0, 0, -math.sin(sine / 7) / 1.5 - 0.25) * CFrame.new(-math.cos(sine / 7) / 2, -math.cos(sine / 7) / 2, 0), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(0, 0, -math.sin(sine / 7) / 1.5 + 0.25) * CFrame.new(-math.cos(sine / 7) / 2, math.cos(sine / 7) / 2, 0), 0.15)
				rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.Angles(0.1, rootpart.RotVelocity.Y / 70, math.sin(sine / 7) / 5) * CFrame.new(0, 0, math.sin(sine / 3.5) / 10), 0.15)
				neck.C0 = neck.C0:Lerp(necknor * CFrame.Angles(0, 0, -head.RotVelocity.Y / 15), 0.15)
			end
			if not hitfloor then
				RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(math.clamp(tors.Velocity.Y / 200 - 0.3, -hum.JumpPower / 200 - 0.3, hum.JumpPower / 200 - 0.3), 0, 0), 0.15)
				LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(math.clamp(tors.Velocity.Y / 200 - 0.3, -hum.JumpPower / 200 - 0.3, hum.JumpPower / 200 - 0.3), 0, 0), 0.15)
				RH.C0 = RH.C0:Lerp(RHnor + Vector3.new(0, 0.6, -0.4), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(0, 0, 0.3) + Vector3.new(0, 0.1, 0), 0.15)
				rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.Angles(-math.clamp(tors.Velocity.Y / 100, -hum.JumpPower / 100, hum.JumpPower / 100), 0, 0), 0.15)
				neck.C0 = neck.C0:Lerp(necknor, 0.15)
			end
		end
		if JevilForm == true then
			if torsvel < 1 and hum.Health > 30 then
				RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, math.sin(sine / 20) / 8, 0), 0.15)
				LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, -math.sin(sine / 20) / 8, 0), 0.15)
				RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
				rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.new(0, 0, 0.2 * math.sin(sine / 20)), 0.1)
				neck.C0 = neck.C0:Lerp(necknor, 0.15)
			end
			if torsvel < 1 and hum.Health <= 30 then
				RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.2 + math.cos(sine / 40) / 10, 0, 0.5) + Vector3.new(0, math.sin(sine / 40) / 10, 0), 0.15)
				LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.2 + math.cos(sine / 40) / 10, 0, -0.5) + Vector3.new(0, math.sin(sine / 40) / 10, 0), 0.15)
				RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.1 + math.cos(sine / 40) / 10, 0, 0.5), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.1 + math.cos(sine / 40) / 10, 0, -0.5), 0.15)
				rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.Angles(0.5, 0, 0) + Vector3.new(0.1 * math.cos(sine / 40), 0.1 * math.sin(sine / 40), 0), 0.1)
				neck.C0 = neck.C0:Lerp(necknor, 0.15)
			end
			if torsvel > 1 then
				RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(0, 0.4, (-math.pi / 2 + 0.7) + math.sin(sine / 20) / 10), 0.15)
				LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(0, -0.4, (math.pi / 2 - 0.7) - math.sin(sine / 20) / 10), 0.15)
				RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(0, 0, -math.pi / 2 + 0.7), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(0, 0, math.pi / 2 - 0.7), 0.15)
				rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.Angles(0.7 - math.cos(sine / 20) / 10, rootpart.RotVelocity.Y / 30, 0) + Vector3.new(0, 0.2 * math.sin(sine / 20), 0), 0.15)
				neck.C0 = neck.C0:Lerp(necknor * CFrame.Angles(-0.7, 0, -head.RotVelocity.Y / 10), 0.15)
			end
		end
	elseif rooted == false then
		if JevilForm == false then
			if torsvel < 1 and hitfloor then
				RH.C0 = RH.C0:Lerp(RHnor, 0.15)
				LH.C0 = LH.C0:Lerp(LHnor, 0.15)
			end
			if torsvel > 1 and hitfloor then
				RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(0, 0, -math.sin(sine / 7) / 1.5 - 0.25) * CFrame.new(-math.cos(sine / 7) / 2, -math.cos(sine / 7) / 2, 0), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(0, 0, -math.sin(sine / 7) / 1.5 + 0.25) * CFrame.new(-math.cos(sine / 7) / 2, math.cos(sine / 7) / 2, 0), 0.15)
			end
			if not hitfloor then
				RH.C0 = RH.C0:Lerp(RHnor + Vector3.new(0, 0.6, -0.4), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(0, 0, 0.3) + Vector3.new(0, 0.1, 0), 0.15)
			end
		end
		if JevilForm == true then
			if torsvel < 1 and hum.Health > 30 then
				RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, math.sin(sine / 20) / 8, 0), 0.15)
				LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.4 + math.cos(sine / 20) / 8, -math.sin(sine / 20) / 8, 0), 0.15)
				RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.2 + math.cos(sine / 20) / 8, 0, 0), 0.15)
				rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.new(0, 0, 0.2 * math.sin(sine / 20)), 0.1)
				neck.C0 = neck.C0:Lerp(necknor, 0.15)
			end
			if torsvel < 1 and hum.Health <= 30 then
				RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(-0.2 + math.cos(sine / 40) / 10, 0, 0.5) + Vector3.new(0, math.sin(sine / 40) / 10, 0), 0.15)
				LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(-0.2 + math.cos(sine / 40) / 10, 0, -0.5) + Vector3.new(0, math.sin(sine / 40) / 10, 0), 0.15)
				RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(-0.1 + math.cos(sine / 40) / 10, 0, 0.5), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(-0.1 + math.cos(sine / 40) / 10, 0, -0.5), 0.15)
				rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.Angles(0.5, 0, 0) + Vector3.new(0.1 * math.cos(sine / 40), 0.1 * math.sin(sine / 40), 0), 0.1)
				neck.C0 = neck.C0:Lerp(necknor, 0.15)
			end
			if torsvel > 1 then
				RS.C0 = RS.C0:Lerp(RSnor * CFrame.Angles(0, 0.4, (-math.pi / 2 + 0.7) + math.sin(sine / 20) / 10), 0.15)
				LS.C0 = LS.C0:Lerp(LSnor * CFrame.Angles(0, -0.4, (math.pi / 2 - 0.7) - math.sin(sine / 20) / 10), 0.15)
				RH.C0 = RH.C0:Lerp(RHnor * CFrame.Angles(0, 0, -math.pi / 2 + 0.7), 0.15)
				LH.C0 = LH.C0:Lerp(LHnor * CFrame.Angles(0, 0, math.pi / 2 - 0.7), 0.15)
				rootj.C0 = rootj.C0:Lerp(rootjnor * CFrame.Angles(0.7 - math.cos(sine / 20) / 10, rootpart.RotVelocity.Y / 30, 0) + Vector3.new(0, 0.2 * math.sin(sine / 20), 0), 0.15)
				neck.C0 = neck.C0:Lerp(necknor * CFrame.Angles(-0.7, 0, -head.RotVelocity.Y / 10), 0.15)
			end
		end
	end
end
